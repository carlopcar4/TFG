(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Dropdowns = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* dropdowns
 ========================================================================== */

var Dropdowns = function () {
  var DATA_COMPONENT = '[data-component="dropdown"]';

  var KEY_CODES = {
    escape: 27,
    end: 35,
    home: 36,
    up: 38,
    down: 40
  };

  var Dropdown = function () {
    function Dropdown(options) {
      _classCallCheck(this, Dropdown);

      this.trigger = options.trigger;
      this.dropdown = document.getElementById(options.dropdown);
      this.items = this.dropdown.querySelectorAll('[data-item]');
      this.links = this.dropdown.querySelectorAll('[data-focus]');

      var _links = _slicedToArray(this.links, 1);

      this.firstLink = _links[0];

      this.lastLink = this.links[this.links.length - 1];

      this.state = [];
      this.currentFocusedIndex = 0;

      this.hover = options.hover;
      this.isOpen = options.isOpen;
      this.autoClose = options.autoClose;

      this.open = this.open.bind(this);
      this.toggle = this.toggle.bind(this);
      this.onClick = this.onClick.bind(this);
      this.onFocus = this.onFocus.bind(this);
      this.onKeydown = this.onKeydown.bind(this);

      if (this.isOpen) this.open();
    }

    _createClass(Dropdown, [{
      key: 'onClick',
      value: function onClick(event) {
        if (!this.autoClose && !event.target.closest('#' + this.trigger.id + ', #' + this.dropdown.id)) {
          this.close();
        }

        if (this.autoClose && !event.target.closest('#' + this.trigger.id)) {
          this.close();
        }
      }
    }, {
      key: 'onFocus',
      value: function onFocus(event) {
        var _this = this;

        this.state.forEach(function (section, index) {
          if (event.target === section.link) {
            _this.currentFocusedIndex = index;
          }
        });
      }
    }, {
      key: 'setFocus',
      value: function setFocus(event) {
        event.preventDefault();

        if (event.target === this.trigger) this.currentFocusedIndex = 0;

        switch (event.which) {
          case KEY_CODES.up:
            this.state[this.currentFocusedIndex].prevLink.focus();
            break;
          case KEY_CODES.home:
            this.firstLink.focus();
            break;
          case KEY_CODES.end:
            this.lastLink.focus();
            break;
          case KEY_CODES.down:
            if (event.target !== this.trigger) {
              this.state[this.currentFocusedIndex].nextLink.focus();
            } else {
              this.firstLink.focus();
            }
            break;
          default:
            break;
        }
      }
    }, {
      key: 'onKeydown',
      value: function onKeydown(event) {
        switch (event.which) {
          case KEY_CODES.escape:
            this.close(event);
            break;
          case KEY_CODES.up:
          case KEY_CODES.down:
          case KEY_CODES.home:
          case KEY_CODES.end:
            this.setFocus(event);
            break;
          default:
            break;
        }
      }
    }, {
      key: 'addAttributes',
      value: function addAttributes() {
        this.trigger.setAttribute('aria-haspopup', true);
        this.trigger.setAttribute('aria-controls', this.trigger.dataset.target);
        this.dropdown.setAttribute('role', 'menu');
        this.dropdown.setAttribute('aria-labelledby', this.trigger.id);
        this.dropdown.setAttribute('tabindex', -1);
        this.dropdown.setAttribute('aria-hidden', !this.isOpen);

        this.state.forEach(function (section) {
          if (section.item) section.item.setAttribute('role', 'none');

          section.link.setAttribute('role', 'menuitem');
          section.link.setAttribute('tabindex', -1);
        });
      }
    }, {
      key: 'removeAttributes',
      value: function removeAttributes() {
        this.trigger.removeAttribute('aria-haspopup');
        this.trigger.removeAttribute('aria-controls');
        this.trigger.removeAttribute('aria-expanded');
        this.dropdown.removeAttribute('role');
        this.dropdown.removeAttribute('aria-labelledby');
        this.dropdown.removeAttribute('tabindex');
        this.dropdown.removeAttribute('aria-hidden');

        this.state.forEach(function (section) {
          if (section.item) section.item.removeAttribute('role');

          section.link.removeAttribute('role');
          section.link.removeAttribute('tabindex');
        });
      }
    }, {
      key: 'addEventListeners',
      value: function addEventListeners() {
        var _this2 = this;

        document.addEventListener('click', this.onClick);
        if (this.hover) document.addEventListener('mouseover', this.onClick);
        this.trigger.addEventListener('keydown', this.onKeydown);
        this.dropdown.addEventListener('keydown', this.onKeydown);
        this.links.forEach(function (link) {
          link.addEventListener('focus', _this2.onFocus);
        });
      }
    }, {
      key: 'removeEventListeners',
      value: function removeEventListeners() {
        var _this3 = this;

        document.removeEventListener('click', this.onClick);
        if (this.hover) document.removeEventListener('mouseover', this.onClick);
        this.trigger.removeEventListener('keydown', this.onKeydown);
        this.dropdown.removeEventListener('keydown', this.onKeydown);
        this.links.forEach(function (link) {
          link.removeEventListener('focus', _this3.onFocus);
        });
      }
    }, {
      key: 'open',
      value: function open() {
        this.isOpen = true;

        this.trigger.setAttribute('aria-expanded', true);
        this.dropdown.setAttribute('aria-hidden', false);

        // add event listeners
        this.addEventListeners();
      }
    }, {
      key: 'close',
      value: function close(event) {
        this.isOpen = false;

        this.trigger.setAttribute('aria-expanded', false);
        this.dropdown.setAttribute('aria-hidden', true);

        // remove event listeners
        this.removeEventListeners();

        // restoring focus
        if (event) this.trigger.focus();
      }
    }, {
      key: 'toggle',
      value: function toggle(event) {
        event.preventDefault();

        this.isOpen = !this.isOpen;

        this.isOpen ? this.open() : this.close();
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        // remove attributes
        this.removeAttributes();

        // remove event listeners
        this.removeEventListeners();

        // remove event listener on the trigger button
        this.trigger.removeEventListener('click', this.toggle);
        if (this.hover) this.trigger.removeEventListener('mouseover', this.open);
      }
    }, {
      key: 'render',
      value: function render() {
        var _this4 = this;

        this.links.forEach(function (link, index) {
          _this4.state.push({
            item: _this4.items[index],
            link: link,
            prevLink: _this4.links[index - 1] || _this4.lastLink,
            nextLink: _this4.links[index + 1] || _this4.firstLink
          });
        });

        // add attributes
        this.addAttributes();

        // toggle dropdown
        this.trigger.addEventListener('click', this.toggle);
        if (this.hover) this.trigger.addEventListener('mouseover', this.open);
      }
    }]);

    return Dropdown;
  }();

  // save all active dropdowns


  var activeDropdowns = [];

  var render = function render(triggerId) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$isOpen = _ref.isOpen,
        isOpen = _ref$isOpen === undefined ? false : _ref$isOpen,
        _ref$hover = _ref.hover,
        hover = _ref$hover === undefined ? false : _ref$hover,
        _ref$autoClose = _ref.autoClose,
        autoClose = _ref$autoClose === undefined ? false : _ref$autoClose;

    var trigger = document.getElementById(triggerId);
    var dropdown = trigger.dataset.target;
    var options = {
      trigger: trigger,
      dropdown: dropdown,
      isOpen: isOpen,
      hover: hover,
      autoClose: autoClose
    };

    var activeDropdown = new Dropdown(options);
    activeDropdown.render();

    // add active dropdowns to array
    activeDropdowns.push(activeDropdown);
  };

  var destroy = function destroy(triggerId) {
    activeDropdowns.forEach(function (activeDropdown, index) {
      if (triggerId === activeDropdown.trigger.id) {
        activeDropdown.destroy();

        // remove dropdown from array
        activeDropdowns.splice(index, 1);
      }
    });
  };

  var init = function init() {
    var triggers = document.querySelectorAll(DATA_COMPONENT);
    var options = {};

    triggers.forEach(function (trigger) {
      options.trigger = trigger;
      options.dropdown = trigger.dataset.target;

      options.hover = trigger.dataset.hover === 'true';
      options.isOpen = trigger.dataset.open === 'true';
      options.autoClose = trigger.dataset.autoClose === 'true';

      var dropdown = new Dropdown(options);
      dropdown.render();
    });
  };

  return { render: render, destroy: destroy, init: init };
}();

exports.default = Dropdowns;

},{}]},{},[1])(1)
});
